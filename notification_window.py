import tkinter as tk
from tkinter import ttk
from win32api import GetSystemMetrics
import winsound
import time
from PIL import Image, ImageTk, ImageDraw
import random
from logger import Logger
import os

class NotificationWindow:
    def __init__(self, parent, title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", message=""):
        try:
            log_dir = "logs"
            if not os.path.exists(log_dir):
                os.makedirs(log_dir)
                
            self.logger = Logger("NotificationWindow", "logs/notifications.log")
            
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
            self.bg_color = '#4A90E2'  # –Ø—Ä–∫–∏–π —Å–∏–Ω–∏–π
            self.text_color = 'white'  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.title = title
            self.message = message
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
            self.popup = tk.Toplevel(parent)
            self.popup.withdraw()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
            self.popup.title("–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞!")
            self.popup.overrideredirect(True)
            self.popup.configure(bg=self.bg_color)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.content_frame = tk.Frame(
                self.popup,
                bg=self.bg_color,
                bd=0
            )
            self.content_frame.pack(expand=True, fill='both', padx=30, pady=30)
            
            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self._create_title()
            self._create_message()
            self._create_close_button()
            
        except Exception as e:
            self.logger.error(f"Failed to initialize notification window: {str(e)}")
            raise

    def _create_title(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        self.title_label = tk.Label(
            self.content_frame,
            text="–ï–ì–û–†!",
            font=("Montserrat", 32, "bold"),
            bg=self.bg_color,
            fg=self.text_color
        )
        self.title_label.grid(row=0, column=0, pady=(0, 20), sticky="nsew")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        self.content_frame.grid_columnconfigure(0, weight=1)

    def _create_message(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        messages = [
            "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤!\n–¢–≤–æ–∏ –≥–ª–∞–∑–∫–∏ —É—Å—Ç–∞–ª–∏ üëÄ",
            "–í—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å!\n–ü–æ–±–µ–≥–∞–π –Ω–µ–º–Ω–æ–≥–æ üèÉ",
            "–ü–æ—Ä–∞ —Ä–∞–∑–º—è—Ç—å—Å—è!\n–ü–æ–∏–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É—à–∫–∏ –∏–ª–∏ –ø–æ—Ä–∏—Å—É–π? üéØ",
            "–ü–µ—Ä–µ—Ä—ã–≤!\n–ü–æ—Ä–∞ –ø–æ–¥–≤–∏–≥–∞—Ç—å—Å—è üåü"
        ]
        
        self.message_label = tk.Label(
            self.content_frame,
            text=random.choice(messages),
            font=("Montserrat", 18),
            wraplength=400,
            bg=self.bg_color,
            fg=self.text_color,
            justify=tk.CENTER
        )
        self.message_label.grid(row=1, column=0, pady=(0, 30), sticky="nsew")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        self.content_frame.grid_columnconfigure(0, weight=1)

    def _create_close_button(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        self.close_button = tk.Button(
            self.content_frame,
            text="–•–æ—Ä–æ—à–æ!",
            font=("Montserrat", 14, "bold"),
            command=self.close,
            bg='white',
            fg=self.bg_color,
            relief="flat",
            width=15,
            cursor="hand2"
        )
        self.close_button.grid(row=2, column=0, pady=10, sticky="nsew")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        self.content_frame.grid_columnconfigure(0, weight=1)

    def show(self, duration=15):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
            screen_width = GetSystemMetrics(0)
            screen_height = GetSystemMetrics(1)
            
            # –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
            window_width = 450
            window_height = 350
            
            # –ü–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —Å –æ—Ç—Å—Ç—É–ø–æ–º
            x = screen_width - window_width - 20
            y = screen_height - window_height - 40
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            self.popup.geometry(f"{window_width}x{window_height}+{x}+{y}")
            self.popup.attributes('-topmost', True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
            self.popup.deiconify()
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
            winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
            
            # –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ duration —Å–µ–∫—É–Ω–¥
            self.auto_close_id = self.popup.after(duration * 1000, self.close)
            
        except Exception as e:
            self.logger.error(f"Failed to show notification: {str(e)}")
            raise

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
            if hasattr(self, 'auto_close_id'):
                self.popup.after_cancel(self.auto_close_id)
                del self.auto_close_id
            self.popup.withdraw()
        except Exception as e:
            self.logger.error(f"Error closing notification: {str(e)}")

    def hide(self):
        """–°–∫—Ä—ã—Ç—å –æ–∫–Ω–æ"""
        self.close()
