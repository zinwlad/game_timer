from PyQt5 import QtWidgets, QtCore, QtGui
from win32api import GetSystemMetrics
import winsound
import time
import random
from logger import Logger
import os

"""
–§–∞–π–ª: notification_window.py

–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Game Timer.
"""

class NotificationWindow(QtWidgets.QDialog):
    def __init__(self, title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", message="", on_close_callback=None):
        super().__init__()
        self.on_close_callback = on_close_callback
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        self.logger = Logger("NotificationWindow", "logs/notifications.log")

        self.setWindowTitle(title)
        self.setWindowFlags(self.windowFlags() | QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–µ–Ω—å—é
        shadow_widget = QtWidgets.QWidget(self)
        shadow_widget.setObjectName("shadow_widget")
        shadow_widget.setStyleSheet("""
            QWidget#shadow_widget {
                background-color: #4A90E2;
                border-radius: 20px;
            }
        """)
        shadow = QtWidgets.QGraphicsDropShadowEffect(self)
        shadow.setBlurRadius(32)
        shadow.setColor(QtGui.QColor(0, 0, 0, 160))
        shadow.setOffset(0, 8)
        shadow_widget.setGraphicsEffect(shadow)

        layout = QtWidgets.QVBoxLayout(shadow_widget)
        layout.setContentsMargins(30, 30, 30, 30)
        layout.setSpacing(18)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QtWidgets.QLabel("–ï–ì–û–†!")
        title_label.setFont(QtGui.QFont("Montserrat", 32, QtGui.QFont.Bold))
        title_label.setAlignment(QtCore.Qt.AlignCenter)
        title_label.setStyleSheet("color: white;")
        layout.addWidget(title_label)

        # –°–æ–æ–±—â–µ–Ω–∏–µ
        messages = [
            "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤!\n–¢–≤–æ–∏ –≥–ª–∞–∑–∫–∏ —É—Å—Ç–∞–ª–∏ üëÄ",
            "–í—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å!\n–ü–æ–±–µ–≥–∞–π –Ω–µ–º–Ω–æ–≥–æ üèÉ",
            "–ü–æ—Ä–∞ —Ä–∞–∑–º—è—Ç—å—Å—è!\n–ü–æ–∏–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É—à–∫–∏ –∏–ª–∏ –ø–æ—Ä–∏—Å—É–π? üéØ",
            "–ü–µ—Ä–µ—Ä—ã–≤!\n–ü–æ—Ä–∞ –ø–æ–¥–≤–∏–≥–∞—Ç—å—Å—è üåü"
        ]
        msg = message if message else random.choice(messages)
        self.message_label = QtWidgets.QLabel(msg)
        self.message_label.setFont(QtGui.QFont("Montserrat", 18))
        self.message_label.setWordWrap(True)
        self.message_label.setAlignment(QtCore.Qt.AlignCenter)
        self.message_label.setStyleSheet("color: #f5f6fa;")
        layout.addWidget(self.message_label)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QtWidgets.QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.setFont(QtGui.QFont("Montserrat", 14))
        close_btn.setCursor(QtCore.Qt.PointingHandCursor)
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #357ABD;
                color: white;
                border-radius: 12px;
                padding: 10px 36px;
                font-weight: bold;
                letter-spacing: 1px;
            }
            QPushButton:hover {
                background-color: #285a8c;
            }
        """)
        close_btn.clicked.connect(self.accept)
        layout.addWidget(close_btn, alignment=QtCore.Qt.AlignCenter)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout –æ–∫–Ω–∞
        outer_layout = QtWidgets.QVBoxLayout(self)
        outer_layout.setContentsMargins(0, 0, 0, 0)
        outer_layout.addWidget(shadow_widget)
        self.setLayout(outer_layout)
        self.resize(500, 250)
        self.setModal(True)

        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
        self._move_to_bottom_right()
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        self._animate_show()

    def _move_to_bottom_right(self):
        screen_geo = QtWidgets.QApplication.desktop().availableGeometry()
        self.move(screen_geo.width() - self.width() - 20, screen_geo.height() - self.height() - 20)

    def _animate_show(self):
        self.anim = QtCore.QPropertyAnimation(self, b"windowOpacity")
        self.anim.setDuration(500)
        self.anim.setStartValue(0)
        self.anim.setEndValue(1)
        self.anim.start()

    def closeEvent(self, event):
        if self.on_close_callback:
            self.on_close_callback()
        super().closeEvent(event)

    def show(self, duration=15):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        super().show()
        winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
        if duration > 0:
            QtCore.QTimer.singleShot(duration * 1000, self.accept)

    def update_message(self, message: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        self.message_label.setText(message)
            
    def update_theme(self, is_dark: bool = False):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–º—É –æ–∫–Ω–∞
        
        Args:
            is_dark: True –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã, False –¥–ª—è —Å–≤–µ—Ç–ª–æ–π
        """
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∏–ª–∏ –∑–∞–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ QSS
        # –ù–æ –æ—Å—Ç–∞–≤–∏–º –µ–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
        self.logger.info(f"Theme update called with is_dark={is_dark}. No visual change will occur.")
