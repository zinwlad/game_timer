import tkinter as tk
from tkinter import ttk
from win32api import GetSystemMetrics
import winsound
import time
from PIL import Image, ImageTk, ImageDraw
import random
from logger import Logger
import os

class NotificationWindow:
    def __init__(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            log_dir = "logs"
            if not os.path.exists(log_dir):
                os.makedirs(log_dir)
                
            self.logger = Logger("NotificationWindow", "logs/notifications.log")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ —Å—Ä–∞–∑—É
            self.gradient_colors = self._generate_gradient_colors()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            self.style = ttk.Style()
            self.style.configure(
                "Healthy.Horizontal.TProgressbar",
                troughcolor='white',
                background=self.gradient_colors[1],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ç–æ—Ä–æ–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
                thickness=10
            )
            
            self.window = tk.Tk()
            self.window.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
            self.popup = tk.Toplevel()
            self.popup.withdraw()  # –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
            self.popup.title("üéÆ –ü–µ—Ä–µ—Ä—ã–≤!")
            self.popup.geometry("600x500")  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            
            # –°–æ–∑–¥–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            self.background_image = self._create_gradient_background()
            background_label = tk.Label(self.popup, image=self.background_image)
            background_label.place(x=0, y=0, relwidth=1, relheight=1)
            
            # –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É –æ–∫–Ω–∞ –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω
            self.popup.overrideredirect(True)
            self.popup.attributes('-topmost', True)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.content_frame = tk.Frame(self.popup)
            self.content_frame.pack(expand=True, fill='both', padx=30, pady=30)
            self.content_frame.configure(bg=self.gradient_colors[0])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É
            self._create_animated_icon()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–≤–µ—á–µ–Ω–∏—è
            self._create_glowing_title()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self._create_message()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–¥–æ—Ä–æ–≤—å—è
            self._create_health_bar()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
            self._create_close_button()
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ–∫–Ω–æ
            self._position_window()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
            self.blink_count = 0
            self.glow_intensity = 0
            self.glow_increasing = True
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ
            self.popup.after(30000, self.close)
            
        except Exception as e:
            self.logger.error(f"Failed to initialize notification window: {str(e)}")
            raise

    def _generate_gradient_colors(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞"""
        try:
            colors = [
                ('#FF6B6B', '#4ECDC4'),  # –ö—Ä–∞—Å–Ω—ã–π –∫ –±–∏—Ä—é–∑–æ–≤–æ–º—É
                ('#A8E6CF', '#FFD3B6'),  # –ú—è—Ç–Ω—ã–π –∫ –ø–µ—Ä—Å–∏–∫–æ–≤–æ–º—É
                ('#FFB6B9', '#8AC6D1'),  # –†–æ–∑–æ–≤—ã–π –∫ –≥–æ–ª—É–±–æ–º—É
                ('#B8F2E6', '#FFA69E')   # –ë–∏—Ä—é–∑–æ–≤—ã–π –∫ –ª–æ—Å–æ—Å–µ–≤–æ–º—É
            ]
            return random.choice(colors)
        except Exception as e:
            self.logger.error(f"Failed to generate gradient colors: {str(e)}")
            return ('#4A90E2', '#50E3C2')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _create_gradient_background(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞"""
        try:
            width = 600
            height = 500
            image = Image.new('RGB', (width, height))
            draw = ImageDraw.Draw(image)
            
            color1 = self.gradient_colors[0]
            color2 = self.gradient_colors[1]
            
            for y in range(height):
                r = int((1 - y/height) * int(color1[1:3], 16) + (y/height) * int(color2[1:3], 16))
                g = int((1 - y/height) * int(color1[3:5], 16) + (y/height) * int(color2[3:5], 16))
                b = int((1 - y/height) * int(color1[5:7], 16) + (y/height) * int(color2[5:7], 16))
                draw.line([(0, y), (width, y)], fill=(r, g, b))
            
            return ImageTk.PhotoImage(image)
        except Exception as e:
            self.logger.error(f"Failed to create gradient background: {str(e)}")
            # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π —Ñ–æ–Ω –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            image = Image.new('RGB', (600, 500), '#4A90E2')
            return ImageTk.PhotoImage(image)

    def _create_animated_icon(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–∫–æ–Ω–∫–∏"""
        self.icons = ["‚è∞", "‚åõ", "üéÆ", "üéØ"]
        self.current_icon = 0
        self.icon_label = tk.Label(
            self.content_frame,
            text=self.icons[0],
            font=("Segoe UI Emoji", 82),
            bg=self.gradient_colors[0],
            fg='white'
        )
        self.icon_label.pack(pady=(0, 20))

    def _create_glowing_title(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–≤–µ—á–µ–Ω–∏—è"""
        self.title_label = tk.Label(
            self.content_frame,
            text="–ü–û–†–ê –û–¢–î–û–•–ù–£–¢–¨!",
            font=("Arial Black", 36, "bold"),
            bg=self.gradient_colors[0],
            fg='white'
        )
        self.title_label.pack(pady=(0, 20))

    def _create_message(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        messages = [
            "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ 20 –º–∏–Ω—É—Ç\n–í–∞—à–∏ –≥–ª–∞–∑–∞ –∏ —Å–ø–∏–Ω–∞ —Å–∫–∞–∂—É—Ç —Å–ø–∞—Å–∏–±–æ!",
            "–í—Ä–µ–º—è —Ä–∞–∑–º—è—Ç—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å!\n–ó–¥–æ—Ä–æ–≤—å–µ –≤–∞–∂–Ω–µ–µ –∏–≥—Ä üåü",
            "–ù–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤ - –±–æ–ª—å—à–∞—è –ø–æ–ª—å–∑–∞!\n–í—Å—Ç–∞–Ω—å—Ç–µ –∏ —Ä–∞–∑–æ–º–Ω–∏—Ç–µ—Å—å üí™",
            "–ü–æ—Ä–∞ –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏!\n–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ - –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç üåø"
        ]
        self.message = tk.Label(
            self.content_frame,
            text=random.choice(messages),
            font=("Segoe UI", 24),
            wraplength=500,
            bg=self.gradient_colors[0],
            fg='white'
        )
        self.message.pack(pady=20)

    def _create_health_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        self.health_frame = tk.Frame(self.content_frame, bg=self.gradient_colors[0])
        self.health_frame.pack(pady=20, fill='x')
        
        self.health_bar = ttk.Progressbar(
            self.health_frame,
            length=400,
            mode='determinate',
            style='Healthy.Horizontal.TProgressbar'
        )
        self.health_bar.pack()
        self.health_bar['value'] = 100

    def _create_close_button(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–π –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        style = {
            'font': ('Arial', 16, 'bold'),
            'bg': 'white',
            'fg': self.gradient_colors[0],
            'relief': tk.FLAT,
            'padx': 30,
            'pady': 15,
            'cursor': 'hand2'  # –ö—É—Ä—Å–æ—Ä –≤ –≤–∏–¥–µ —Ä—É–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        }
        
        self.close_btn = tk.Button(
            self.content_frame,
            text="–ü–æ–Ω—è—Ç–Ω–æ, —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤!",
            command=self.close,
            **style
        )
        self.close_btn.pack(pady=20)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        self.close_btn.bind('<Enter>', self._on_button_hover)
        self.close_btn.bind('<Leave>', self._on_button_leave)

    def _position_window(self):
        """–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É"""
        screen_width = GetSystemMetrics(0)
        screen_height = GetSystemMetrics(1)
        window_width = 600
        window_height = 500
        x = screen_width - window_width - 20
        y = screen_height - window_height - 60
        self.popup.geometry(f"{window_width}x{window_height}+{x}+{y}")

    def _on_button_hover(self, event):
        """–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É"""
        self.close_btn.configure(
            bg=self.gradient_colors[0],
            fg='white'
        )

    def _on_button_leave(self, event):
        """–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∏"""
        self.close_btn.configure(
            bg='white',
            fg=self.gradient_colors[0]
        )

    def _animate_icon(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏"""
        if hasattr(self, 'icon_label'):
            self.current_icon = (self.current_icon + 1) % len(self.icons)
            self.icon_label.configure(text=self.icons[self.current_icon])
            if self.popup.winfo_exists():
                self.popup.after(1000, self._animate_icon)

    def _animate_glow(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Å–≤–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        if hasattr(self, 'title_label'):
            if self.glow_increasing:
                self.glow_intensity += 0.1
                if self.glow_intensity >= 1:
                    self.glow_increasing = False
            else:
                self.glow_intensity -= 0.1
                if self.glow_intensity <= 0:
                    self.glow_increasing = True
            
            # –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è, –∏–∑–º–µ–Ω—è—è —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            size = 36 + int(self.glow_intensity * 4)
            self.title_label.configure(font=("Arial Black", size, "bold"))
            
            if self.popup.winfo_exists():
                self.popup.after(50, self._animate_glow)

    def show(self):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        try:
            self.popup.deiconify()
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            for i in range(11):
                self.popup.attributes('-alpha', i/10)
                self.popup.update()
                time.sleep(0.02)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            self._animate_icon()
            self._animate_glow()
            self.blink_window()
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
            winsound.PlaySound("SystemExclamation", winsound.SND_ASYNC)
            
        except Exception as e:
            self.logger.error(f"Error showing notification: {str(e)}")

    def blink_window(self):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ –æ–∫–Ω–æ–º"""
        try:
            if self.blink_count < 6:
                current_alpha = self.popup.attributes('-alpha')
                new_alpha = 0.4 if current_alpha == 1.0 else 1.0
                self.popup.attributes('-alpha', new_alpha)
                self.blink_count += 1
                
                # –£–º–µ–Ω—å—à–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –º–∏–≥–∞–Ω–∏—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
                delay = 500 + (self.blink_count * 100)
                self.popup.after(delay, self.blink_window)
                
        except Exception as e:
            self.logger.error(f"Error during window blinking: {str(e)}")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        try:
            # –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            for i in range(10, -1, -1):
                self.popup.attributes('-alpha', i/10)
                self.popup.update()
                time.sleep(0.02)
            self.popup.withdraw()
            
        except Exception as e:
            self.logger.error(f"Error closing notification: {str(e)}")
            self.popup.withdraw()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
