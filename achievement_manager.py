"""–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
import json
"""
–§–∞–π–ª: achievement_manager.py

–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–≥—Ä—É–∑–∫–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Game Timer.
"""

import os
from datetime import datetime
from typing import Dict, Optional, List
import logging
from achievements import Achievement, ACHIEVEMENTS
from notification_window import NotificationWindow

class AchievementManager:
    def __init__(self, settings, notification_callback=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        
        Args:
            settings: –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
            notification_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.settings = settings
        self.notification_callback = notification_callback
        self.logger = logging.getLogger('AchievementManager')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.achievements: Dict[str, Achievement] = ACHIEVEMENTS.copy()
        self._load_achievements()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        self.stats = {
            'daily_uses': [],  # –¥–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            'session_duration': 0,  # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            'daily_duration': 0,  # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å
            'consecutive_days': 0,  # –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
            'hotkeys_used': set(),  # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
            'notifications_received': 0,  # –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            'breaks_taken': 0,  # —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã
            'last_active_date': None  # –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        }
        
    def _load_achievements(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        try:
            saved = self.settings.get('achievements', {})
            for ach_id, data in saved.items():
                if ach_id in self.achievements:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    achievement = self.achievements[ach_id]
                    achievement.progress = data.get('progress', 0)
                    achievement.completed = data.get('completed', False)
                    achievement.completed_date = data.get('completed_date', None)
        except Exception as e:
            self.logger.error(f"Error loading achievements: {str(e)}")
            
    def _save_achievements(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        try:
            saved_data = {}
            for ach_id, achievement in self.achievements.items():
                saved_data[ach_id] = {
                    'progress': achievement.progress,
                    'completed': achievement.completed,
                    'completed_date': achievement.completed_date
                }
            self.settings.set('achievements', saved_data)
            self.settings.save()
        except Exception as e:
            self.logger.error(f"Error saving achievements: {str(e)}")
            
    def _notify_achievement(self, achievement: Achievement):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        try:
            title = "üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!"
            message = f"{achievement.title}\n{achievement.description}"
            
            if self.notification_callback:
                self.notification_callback(title, message)
                
            self.logger.info(f"Achievement unlocked: {achievement.title}")
        except Exception as e:
            self.logger.error(f"Error showing achievement notification: {str(e)}")
            
    def update_achievement(self, achievement_id: str, progress: int = 1):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        
        Args:
            achievement_id: ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            progress: –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        try:
            if achievement_id not in self.achievements:
                return
                
            achievement = self.achievements[achievement_id]
            if achievement.completed:
                return
                
            achievement.progress += progress
            if achievement.progress >= achievement.max_progress:
                achievement.completed = True
                achievement.completed_date = datetime.now().isoformat()
                self._notify_achievement(achievement)
                
            self._save_achievements()
        except Exception as e:
            self.logger.error(f"Error updating achievement: {str(e)}")
            
    def check_time_achievements(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º"""
        try:
            current_hour = datetime.now().hour
            
            # –ù–æ—á–Ω–∞—è —Å–æ–≤–∞ (3 —á–∞—Å–∞ –Ω–æ—á–∏)
            if current_hour == 3:
                self.update_achievement('night_owl')
                
            # –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ (6 —É—Ç—Ä–∞)
            if current_hour == 6:
                self.update_achievement('early_bird')
                
        except Exception as e:
            self.logger.error(f"Error checking time achievements: {str(e)}")
            
    def on_timer_start(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞"""
        self.update_achievement('first_timer')
        self.update_achievement('time_master')
        
    def on_timer_tick(self, elapsed_seconds: int):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —Ä–∞–±–æ—Ç—ã —Ç–∞–π–º–µ—Ä–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['session_duration'] = elapsed_seconds
        self.stats['daily_duration'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if elapsed_seconds >= 3600:  # 1 —á–∞—Å
            self.update_achievement('hour_warrior')
            
        if self.stats['daily_duration'] >= 10800:  # 3 —á–∞—Å–∞
            self.update_achievement('marathon_runner')
            
    def on_hotkey_used(self, hotkey: str):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏"""
        self.stats['hotkeys_used'].add(hotkey)
        if len(self.stats['hotkeys_used']) >= 3:
            self.update_achievement('hotkey_master')
            
    def on_notification_shown(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.stats['notifications_received'] += 1
        self.update_achievement('notification_lover')
        
    def on_break_taken(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤ –≤–æ–≤—Ä–µ–º—è"""
        self.stats['breaks_taken'] += 1
        self.update_achievement('break_champion')
        
    def on_daily_check(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        try:
            today = datetime.now().date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if self.stats['last_active_date']:
                last_date = datetime.fromisoformat(self.stats['last_active_date']).date()
                if (today - last_date).days == 1:
                    self.stats['consecutive_days'] += 1
                else:
                    self.stats['consecutive_days'] = 1
            else:
                self.stats['consecutive_days'] = 1
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            self.stats['last_active_date'] = today.isoformat()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if self.stats['consecutive_days'] >= 5:
                self.update_achievement('daily_hero')
                
            if self.stats['consecutive_days'] >= 7:
                self.update_achievement('weekly_master')
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.settings.set('achievement_stats', self.stats)
            self.settings.save()
            
        except Exception as e:
            self.logger.error(f"Error checking daily achievements: {str(e)}")
            
    def get_all_achievements(self) -> List[Achievement]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        return list(self.achievements.values())
        
    def get_completed_achievements(self) -> List[Achievement]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        return [a for a in self.achievements.values() if a.completed]
        
    def get_achievement_progress(self, achievement_id: str) -> tuple[int, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        if achievement_id in self.achievements:
            ach = self.achievements[achievement_id]
            return (ach.progress, ach.max_progress)
        return (0, 0)
