import json
import os
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from dataclasses import dataclass
from logger import Logger
from notification_window import NotificationWindow

@dataclass
class Achievement:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏"""
    id: str
    name: str
    description: str
    icon: str
    unlocked: bool = False
    unlocked_at: Optional[str] = None
    progress: int = 0
    required_progress: int = 1

class AchievementManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, settings: Dict[str, Any], root=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        :param settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        :param root: –ö–æ—Ä–Ω–µ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.logger = Logger("AchievementManager")
        self.settings = settings
        self.root = root
        self.achievements_file = "achievements.json"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        self.achievements: Dict[str, Achievement] = {
            "early_bird": Achievement(
                id="early_bird",
                name="–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞",
                description="–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –¥–æ 9 —É—Ç—Ä–∞",
                icon="üåÖ"
            ),
            "consistent_breaks": Achievement(
                id="consistent_breaks",
                name="–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ",
                description="–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
                icon="üéØ",
                required_progress=5
            ),
            "perfect_timing": Achievement(
                id="perfect_timing",
                name="–¢–æ—á–Ω–æ—Å—Ç—å",
                description="–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–∞–π–º–µ—Ä –≤–æ–≤—Ä–µ–º—è 10 —Ä–∞–∑",
                icon="‚è∞",
                required_progress=10
            ),
            "health_master": Achievement(
                id="health_master",
                name="–ú–∞—Å—Ç–µ—Ä –∑–¥–æ—Ä–æ–≤—å—è",
                description="–ù–∞–∫–æ–ø–∏—Ç–µ 24 —á–∞—Å–∞ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤",
                icon="üèÜ",
                required_progress=24*60*60  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            ),
            "night_owl": Achievement(
                id="night_owl",
                name="–ù–æ—á–Ω–∞—è —Å–æ–≤–∞",
                description="–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –ø–æ—Å–ª–µ 22:00",
                icon="ü¶â"
            ),
            "weekend_warrior": Achievement(
                id="weekend_warrior",
                name="–í–æ–∏–Ω –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è",
                description="–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –≤ —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
                icon="üéÆ",
                required_progress=2
            )
        }
        
        self._load_achievements()
        self.logger.info("AchievementManager initialized")
        
    def _load_achievements(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.achievements_file):
                with open(self.achievements_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                    for ach_id, ach_data in data.get("achievements", {}).items():
                        if ach_id in self.achievements:
                            self.achievements[ach_id].unlocked = ach_data.get("unlocked", False)
                            self.achievements[ach_id].unlocked_at = ach_data.get("unlocked_at")
                            self.achievements[ach_id].progress = ach_data.get("progress", 0)
                            
                    self.logger.info("Achievements loaded successfully")
        except Exception as e:
            self.logger.error(f"Failed to load achievements: {str(e)}")
            
    def _save_achievements(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                "achievements": {
                    ach_id: {
                        "unlocked": ach.unlocked,
                        "unlocked_at": ach.unlocked_at,
                        "progress": ach.progress
                    }
                    for ach_id, ach in self.achievements.items()
                }
            }
            
            with open(self.achievements_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
                
            self.logger.info("Achievements saved successfully")
        except Exception as e:
            self.logger.error(f"Failed to save achievements: {str(e)}")
            
    def check_achievements(self, context: Dict[str, Any] = None) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–≤—Ä–µ–º—è, –¥–∞—Ç–∞ –∏ —Ç.–¥.)
        """
        if context is None:
            context = {}
            
        current_time = context.get('current_time', datetime.now())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        self._check_early_bird(current_time)
        self._check_night_owl(current_time)
        self._check_weekend_warrior(current_time)
        self._check_consistent_breaks(current_time)
        self._check_perfect_timing()
        self._check_health_master()
        
        self._save_achievements()
        
    def _check_early_bird(self, current_time: datetime) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞'"""
        if (current_time.hour < 9 and 
            not self.achievements["early_bird"].unlocked):
            self._unlock_achievement("early_bird")
            
    def _check_night_owl(self, current_time: datetime) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '–ù–æ—á–Ω–∞—è —Å–æ–≤–∞'"""
        if (current_time.hour >= 22 and 
            not self.achievements["night_owl"].unlocked):
            self._unlock_achievement("night_owl")
            
    def _check_weekend_warrior(self, current_time: datetime) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '–í–æ–∏–Ω –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è'"""
        if current_time.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            ach = self.achievements["weekend_warrior"]
            if not ach.unlocked:
                ach.progress += 1
                if ach.progress >= ach.required_progress:
                    self._unlock_achievement("weekend_warrior")
                    
    def _check_consistent_breaks(self, current_time: datetime) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ'"""
        ach = self.achievements["consistent_breaks"]
        if not ach.unlocked:
            ach.progress += 1
            if ach.progress >= ach.required_progress:
                self._unlock_achievement("consistent_breaks")
                
    def _check_perfect_timing(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '–¢–æ—á–Ω–æ—Å—Ç—å'"""
        ach = self.achievements["perfect_timing"]
        if not ach.unlocked:
            ach.progress += 1
            if ach.progress >= ach.required_progress:
                self._unlock_achievement("perfect_timing")
                
    def _check_health_master(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '–ú–∞—Å—Ç–µ—Ä –∑–¥–æ—Ä–æ–≤—å—è'"""
        ach = self.achievements["health_master"]
        if not ach.unlocked:
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ add_break_time
            if ach.progress >= ach.required_progress:
                self._unlock_achievement("health_master")
                
    def add_break_time(self, duration: int) -> None:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞
        :param duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        ach = self.achievements["health_master"]
        if not ach.unlocked:
            ach.progress += duration
            self._check_health_master()
            self._save_achievements()
            
    def _unlock_achievement(self, achievement_id: str) -> None:
        """
        –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        :param achievement_id: ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        """
        if achievement_id in self.achievements:
            ach = self.achievements[achievement_id]
            if not ach.unlocked:
                ach.unlocked = True
                ach.unlocked_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if self.root:
                    notification = NotificationWindow(
                        self.root,
                        "–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
                        f"{ach.icon} {ach.name}\n{ach.description}"
                    )
                    notification.show()
                    
                self.logger.info(f"Achievement unlocked: {achievement_id}")
                self._save_achievements()
                
    def get_all_achievements(self) -> List[Achievement]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        return list(self.achievements.values())
        
    def get_unlocked_achievements(self) -> List[Achievement]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        return [ach for ach in self.achievements.values() if ach.unlocked]
        
    def get_achievement_progress(self, achievement_id: str) -> tuple[int, int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        :param achievement_id: ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        :return: (—Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ç—Ä–µ–±—É–µ–º—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å)
        """
        if achievement_id in self.achievements:
            ach = self.achievements[achievement_id]
            return ach.progress, ach.required_progress
        return 0, 0
        
    def reset_progress(self) -> None:
        """–°–±—Ä–æ—Å –≤—Å–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        try:
            for ach in self.achievements.values():
                ach.unlocked = False
                ach.unlocked_at = None
                ach.progress = 0
            self._save_achievements()
            self.logger.info("Achievement progress reset")
        except Exception as e:
            self.logger.error(f"Failed to reset achievements: {str(e)}")
